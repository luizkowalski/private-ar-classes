c
q
c
subreddit_url id: post.community
subreddit_url
subreddit_path
c
self.username
self.send 'users.username'
self.methods
self.username
c
self.communities
self.community
self.user_id_in_database
self.user_id_in_database.id
self.user_id_in_database
self.methods
self
user_id
user
users
c
PostRepository.new.find_posts_by_communities(community_ids: communities.map(&:id))
continue
posts.first.username
posts.first
posts = PostActiveRecord.select('id', 'title', 'description', 'users.username', 'communities.title')
        .joins('LEFT JOIN users on users.id = posts.user_id')
        .joins('LEFT JOIN communities on communities.id = posts.community_id')
        .where(community_id: community_ids).
        order(created_at: :desc)
posts = _
PostActiveRecord.select('id', 'title', 'description', 'users.username', 'communities.title')
        .joins('LEFT JOIN users on users.id = posts.user_id')
        .joins('LEFT JOIN communities on communities.id = posts.community_id')
        .where(community_id: community_ids).
        order(created_at: :desc)
c
CommunityActiveRecord.joins(:subscriptions).to_sql
c
continue
CommunityActiveRecord.joins(:subscriptions).to_sql
q
CommunityActiveRecord.joins(:subscriptions).to_sql
continue
user_communities_ids.first
user_communities_ids = CommunityRepository.new.communities_by_user(user_id: user_id)
CommunityRepository.new.communities_by_user(user_id: user_id)
continue
PostActiveRecord.where(user_id: user_id, community_id: community_ids).map &:id
PostActiveRecord.where(user_id: user_id, community_id: community_ids).to_ary
PostActiveRecord.where(user_id: user_id, community_id: community_ids)
user_id
community_ids
continue
CommunityActiveRecord.joins(:subscriptions).where(community_subscriptions: { user_id: user_id }).to_sql
CommunityActiveRecord.joins(subscriptions: { user_id: 1 }).first
CommunityActiveRecord.joins(subscriptions: { user_id: 1 })
CommunityActiveRecord.joins(:subscriptions).where(community_subscriptions: { user_idCommunityActiveRecord.joins(:subscriptions
CommunityActiveRecord.joins(:subscriptions).where(community_subscriptions: { user_id: 1})
CommunityActiveRecord.joins(:subscriptions).where(community_subscriptions: { user_id: user_id })
CommunityActiveRecord.joins(:subscriptions).to_sql
CommunityActiveRecord.joins(subscriptions: { user_id: 1}).to_sql
CommunityActiveRecord.joins(:subscriptions).to_sql
CommunityActiveRecord.joins(:subscription).to_sql
CommunityActiveRecord
CommunityActiveRecord.joins(subscriptions: { user_id: user_id}).first
CommunityActiveRecord.joins(subscriptions: { user_id: user_id})
communities.first
communities
