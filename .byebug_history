c
CommunityActiveRecord.joins(:subscriptions).to_sql
c
continue
CommunityActiveRecord.joins(:subscriptions).to_sql
q
CommunityActiveRecord.joins(:subscriptions).to_sql
continue
user_communities_ids.first
user_communities_ids = CommunityRepository.new.communities_by_user(user_id: user_id)
CommunityRepository.new.communities_by_user(user_id: user_id)
continue
PostActiveRecord.where(user_id: user_id, community_id: community_ids).map &:id
PostActiveRecord.where(user_id: user_id, community_id: community_ids).to_ary
PostActiveRecord.where(user_id: user_id, community_id: community_ids)
user_id
community_ids
continue
CommunityActiveRecord.joins(:subscriptions).where(community_subscriptions: { user_id: user_id }).to_sql
CommunityActiveRecord.joins(subscriptions: { user_id: 1 }).first
CommunityActiveRecord.joins(subscriptions: { user_id: 1 })
CommunityActiveRecord.joins(:subscriptions).where(community_subscriptions: { user_idCommunityActiveRecord.joins(:subscriptions
CommunityActiveRecord.joins(:subscriptions).where(community_subscriptions: { user_id: 1})
CommunityActiveRecord.joins(:subscriptions).where(community_subscriptions: { user_id: user_id })
CommunityActiveRecord.joins(:subscriptions).to_sql
CommunityActiveRecord.joins(subscriptions: { user_id: 1}).to_sql
CommunityActiveRecord.joins(:subscriptions).to_sql
CommunityActiveRecord.joins(:subscription).to_sql
CommunityActiveRecord
CommunityActiveRecord.joins(subscriptions: { user_id: user_id}).first
CommunityActiveRecord.joins(subscriptions: { user_id: user_id})
communities.first
communities
